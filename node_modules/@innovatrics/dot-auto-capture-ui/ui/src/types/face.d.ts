import type { BaseComponentsUiProps, CustomizationContextProps, HTMLElementWithProps, UiProps } from './common';
import type { CustomElement, DeepRequired, FaceInstructionCode, ObjectValues } from '../../../ui-common/src/types';
export * from './common';
declare global {
    namespace preact.JSX {
        interface IntrinsicElements {
            'x-dot-face-auto-capture-ui': CustomElement<{
                props: FaceUiProps;
            }>;
        }
    }
    namespace React.JSX {
        interface IntrinsicElements {
            'x-dot-face-auto-capture-ui': CustomElement<{
                props: FaceUiProps;
            }>;
        }
    }
}
export declare const FacePlaceholderIconValues: {
    readonly CIRCLE_SOLID: "circle-solid";
    /**
     * @deprecated This placeholder will be removed in future release.
     */
    readonly ELLIPSE_SOLID: "ellipse-solid";
    /**
     * @deprecated This placeholder will be removed in future release.
     */
    readonly MAN_SOLID: "man-solid";
    /**
     * @deprecated This placeholder will be removed in future release.
     */
    readonly WOMAN_SOLID: "woman-solid";
    readonly SQUARE_ROUNDED_DASH: "square-rounded-dash";
    readonly SQUARE_ROUNDED_SOLID: "square-rounded-solid";
    readonly SQUARE_DASH: "square-dash";
    readonly SQUARE_SOLID: "square-solid";
};
export type FacePlaceholderIcon = ObjectValues<typeof FacePlaceholderIconValues>;
export type FaceInstructions = Record<FaceInstructionCode, string>;
export type CustomizableFaceInstructions = Omit<FaceInstructions, 'mouth_score_too_low' | 'mouth_score_too_high'>;
export type FaceUiProps<I = CustomizableFaceInstructions> = UiProps<I> & BaseComponentsUiProps<FacePlaceholderIcon>;
type RequiredUiProps = DeepRequired<FaceUiProps<FaceInstructions>>;
export type FaceProps = CustomizationContextProps<RequiredUiProps>;
export type HTMLFacetUiElement = HTMLElementWithProps<FaceUiProps>;
